#!/usr/bin/env python3

import configparser
import argparse
import logging
import os
import sys

SYSFS_PATH = "/sys/module/hid_fanatec/drivers/hid:fanatec/"
PROFILE_FILE = "profiles.ini"

# Custom ConfigParser to preserve case
class CaseSensitiveConfigParser(configparser.ConfigParser):
    def optionxform(self, optionstr):
        return optionstr  # Preserve case of option names

# Recursive file search
def search_filepath(top: str, filename: str, max_depth: int = 3) -> str:
    if not os.path.isdir(top):
        raise FileNotFoundError(f'Top directory {top} not found.')

    for root, dirs, files in os.walk(top, followlinks=True):
        current_depth = root.count(os.sep) - top.count(os.sep)

        # Limit search depth
        if current_depth > max_depth:
            del dirs[:]

        if filename in files:
            return root

    raise FileNotFoundError(f'{filename} not found in {top}.')

# Configure driver
def apply_configuration(profile_file: str, profile_name: str, device_path: str):
    if not os.path.isfile(profile_file):
        raise FileNotFoundError(f'Profile file {profile_file} does not exist.')

    config = CaseSensitiveConfigParser()
    config.read(profile_file)

    if config.has_section(profile_name):
        for name, value in config.items(profile_name):
            fpath = os.path.join(device_path, name)
            if not os.path.isfile(fpath):
                logging.debug(f'{name} does not exist (skipped).')
                continue

            with open(fpath, "w") as f:
                f.write(str(value))
            logging.debug(f'{name} set to {value}.')
    else:
        logging.error(f'Profile {profile_name} not found in configuration.')

# Main function
def main():
    logging.basicConfig(format='%(levelname)s: %(message)s', level=logging.DEBUG)

    parser = argparse.ArgumentParser()
    parser.add_argument('profile', type=str, help='Profile name to apply.')
    parser.add_argument('-c', '--config', type=str, help='Path to the configuration file containing profiles.')
    parser.add_argument('-w', '--working_dir', type=str, default=SYSFS_PATH, help='Directory to search for Fanatec tuning files.')
    args = parser.parse_args()

    try:
        device_path = search_filepath(args.working_dir, 'advanced_mode')
        logging.debug(f'Path: {device_path}')
        logging.info(f'Device ID: {os.path.basename(device_path)}')

        device_input = search_filepath(args.working_dir, 'name')
        with open(os.path.join(device_input, 'name'), "r") as f:
            device_name = f.read().strip()
            logging.info(f'Device: {device_name}')

        profiles_ini_path = args.config or os.path.join(os.path.dirname(os.path.abspath(__file__)), PROFILE_FILE)

        apply_configuration(profile_file=profiles_ini_path, profile_name=args.profile, device_path=device_path)
        sys.exit(0)

    except Exception as e:
        logging.error(e)
        sys.exit(1)

if __name__ == "__main__":
    main()
