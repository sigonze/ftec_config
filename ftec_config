#!/usr/bin/env python3

import json
import argparse
import logging
import os
import sys

SYSFS_PATH="/sys/module/hid_fanatec/drivers/hid:fanatec/"
PROFILES_PATH="profiles"

# recursive file search
def search_filepath(top: str, filename: str, max_depth: int = 3) -> str:
    if not os.path.isdir(top):
        raise Exception(f'topdir {top} not found')

    for(root,dirs,files) in os.walk(top, followlinks=True):
        current_depth = root.count(os.sep) - top.count(os.sep)

        # max depth to avoid loops
        if current_depth > max_depth:
            del dirs[:]

        if filename in files:
            return root

    raise Exception(f'{filename} not found')


# Configure driver
def applyConfiguration(profile: str, output: str):
    if not os.path.isfile(profile):
        raise Exception(f'file {profile}[.json] does not exist')

    with open(profile, 'r') as json_file:
        data=json.load(json_file)

    for name, value in data.items():
        fpath = os.path.join(output, name)
        # if parameter not found just skip it
        if not os.path.isfile(fpath):
            logging.debug(f'{name} does not exist (skipped)')
        else:
            with open(fpath, "w") as f:
                f.write(str(value))
            logging.debug(f'{name} set to {value}')


# main function
def main():
    logging.basicConfig(format='%(levelname)s: %(message)s', level=logging.DEBUG)

    parser = argparse.ArgumentParser()
    parser.add_argument('profile', type=str)
    parser.add_argument('-s', '--sysfs_dir', nargs='?', const=1, type=str, default=SYSFS_PATH)
    parser.add_argument('-d', '--profile_dir', nargs='?', const=1, type=str, default=PROFILES_PATH)
    args = parser.parse_args()

    try:
        output = search_filepath( args.sysfs_dir, 'advanced_mode' )
        logging.debug(f'path={output}')
        logging.info(f'device id    {os.path.basename(output)}')

        device_input = search_filepath( args.sysfs_dir, 'name' )
        # logging.debug(f'device_input={device_input}')
        with open( os.path.join(device_input, 'name'), "r" ) as f:
            device_name = f.read()
            logging.info(f'device       {device_name.strip()}')

        profile_path = os.path.join(args.profile_dir, args.profile + ".json")
        applyConfiguration(profile_path, output)
        sys.exit(0)

    except Exception as e:
        logging.error(e)
        sys.exit(1)

if __name__ == "__main__":
    main()
